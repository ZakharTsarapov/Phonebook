{"version":3,"file":"static/js/39.7bf72017.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/SectionName/SectionName.module.css?3bcf","components/SectionName/SectionName.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","utils/sortContactsByName.jsx","webpack://react-homework-template/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","Pages/Phonebook/Phonebook.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"text\":\"SectionName_text__pIph9\"};","import PropTypes from 'prop-types';\nimport css from './SectionName.module.css';\n\nexport default function SectionName({ title }) {\n  return <>{title && <h2 className={css.text}>{title}</h2>}</>;\n}\n\nSectionName.propTypes = {\n  title: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"filter__input\":\"Filter_filter__input__toa89\",\"container\":\"Filter_container__L5eml\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/filterSlice';\nimport css from './Filter.module.css';\nimport { getFilterValue } from '../../redux/filterSlice';\nimport { nanoid } from 'nanoid';\n\nexport default function Filter() {\n  const filterValue = useSelector(getFilterValue);\n  const dispatch = useDispatch();\n\n  const filterInputId = nanoid();\n\n  const onChange = evt => {\n    dispatch(setFilter(evt.currentTarget.value.trim()));\n  };\n \n  \n  return (\n    <div className={css.container}>\n      <label className={css.filter} htmlFor={filterInputId}>\n        Find contacts by name\n        <input\n          className={css.filter__input}\n          type=\"text\"\n          onChange={onChange}\n          id={filterInputId}\n          name={filterValue}\n        ></input>\n      </label>\n    </div>\n  );\n}\n \n\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactList_item__EZYHO\",\"item__btn\":\"ContactList_item__btn__KCm18\",\"list\":\"ContactList_list__csErn\",\"loader\":\"ContactList_loader__3ATTL\",\"text\":\"ContactList_text__+NWAW\",\"quantity\":\"ContactList_quantity__JkddB\",\"nomatch\":\"ContactList_nomatch__bx-lK\",\"refetch\":\"ContactList_refetch__87C1E\"};","export default function sortContactsByName(a, b) {\n  return a.name.localeCompare(b.name);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactItem_container__HZiZE\",\"name\":\"ContactItem_name__XjpNK\",\"number\":\"ContactItem_number__mfZ8x\",\"btn\":\"ContactItem_btn__1h5dG\"};","import PropTypes from 'prop-types';\nimport { useDeleteContactMutation } from 'services/phonebookAPI';\nimport { FaTrashAlt, FaSpinner } from 'react-icons/fa';\nimport { IconContext } from 'react-icons';\nimport css from './ContactItem.module.css';\nimport { Notify } from 'notiflix';\n\nexport default function ContactItem({ id, name, number }) {\n  const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\n\n  const onContactDelete = async (contactId, contactName) => {\n    try {\n      await deleteContact(contactId);\n      Notify.success(`\"${contactName}\" був видаленний з вашого списку`);\n    } catch (error) {\n      console.log(error.message);\n      Notify.error(`Помилка, \"${contactName}\" не змогли видалити`);\n    }\n  };\n\n  return (\n    <div className={css.container}>\n      <p className={css.name}>{name}</p>\n      <a className={css.number} href={`tel:${number}`}>\n        {number}\n      </a>\n      <button\n        className={css.btn}\n        type=\"button\"\n        onClick={() => onContactDelete(id, name)}\n        disabled={isDeleting}\n        aria-label=\"Delete contact\"\n      >\n        <IconContext.Provider value={{ size: '2em' }}>\n          {isDeleting ? <FaSpinner /> : <FaTrashAlt />}\n        </IconContext.Provider>\n      </button>\n    </div>\n  );\n}\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import css from './ContactList.module.css';\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getFilterValue } from 'redux/filterSlice';\nimport { useGetAllContactsQuery } from 'services/phonebookAPI';\nimport sortContactsByName from 'utils/sortContactsByName';\nimport ContactItem from 'components/ContactItem';\nimport { FaRedo } from 'react-icons/fa';\nimport { IconContext } from 'react-icons';\n\n\nexport default function ContactList() {\n  const {\n    data: contacts = [],\n    isLoading,\n    isError,\n    refetch,\n  } = useGetAllContactsQuery();\n\n  const filterValue = useSelector(getFilterValue);\n\n  const totalContactsAmount = () => {\n    if (!contacts) {\n      return 0;\n    }\n    return contacts.length;\n  };\n\n  const getVisibleContacts = useMemo(\n    () => () => {\n      if (!contacts) {\n        return;\n      }\n\n      const normalizedFilter = filterValue.toLowerCase().trim();\n\n      return contacts\n        .filter(\n          contact =>\n            contact.name.toLowerCase().includes(normalizedFilter))\n        .sort(sortContactsByName);\n    },\n    [contacts, filterValue]\n  );\n\n\n  const visibleContacts = getVisibleContacts();\n\n  return (\n    <>\n      {isLoading ? (\n        <p className={css.loader}>Loaging...</p>\n      ) : totalContactsAmount() > 0 ? (\n        <>\n          <p className={css.text}>\n            Total Contacts:{' '}\n            <span className={css.quantity}>{totalContactsAmount()}</span>\n          </p>\n          <ul className={css.item}>\n            {visibleContacts.length ? (\n              visibleContacts.map(({ id, name, number }) => (\n                <li className={css.list} key={id}>\n                  <ContactItem id={id} name={name} number={number} />\n                </li>\n              ))\n            ) : (\n              <p className={css.nomatch}>there no contacts</p>\n            )}\n          </ul>\n        </>\n      ) : (\n        <>\n          <p className={css.text}>\n            No contacts in ur phonebook\n          </p>\n        </>\n      )}\n      {isError && (\n        <>\n          <p className={css.refetch}>Error! Refresh ur Phonebook</p>\n          <button\n            className={css.item__btn}\n            type=\"button\"\n            onClick={() => refetch()}\n          >\n            <IconContext.Provider value={{ size: '5em' }}>\n              <FaRedo />\n            </IconContext.Provider>\n          </button>\n        </>\n      )}\n    </>\n  );\n}","// extracted by mini-css-extract-plugin\nexport default {\"contact__btn\":\"ContactForm_contact__btn__xohRT\",\"contact__input\":\"ContactForm_contact__input__pLEHv\",\"contact__label\":\"ContactForm_contact__label__mycg1\",\"contact__form\":\"ContactForm_contact__form__OjRMi\",\"container\":\"ContactForm_container__qpJ1N\"};","import { useState } from 'react';\nimport {\n  useGetAllContactsQuery,\n  useAddContactMutation,\n} from 'services/phonebookAPI';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { Notify } from 'notiflix';\nimport css from './ContactForm.module.css';\n\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const { data: contacts } = useGetAllContactsQuery();\n  const [addContact, { isLoading: isCreating }] = useAddContactMutation();\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const onInputChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'number':\n        return setNumber(value);\n      default:\n        return;\n    }\n  };\n\n  const formReset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const onContactFormSubmit = async evt => {\n    evt.preventDefault();\n\n    if (\n      contacts.find(\n        contact =>\n          contact.name.toLowerCase() === name.toLowerCase() &&\n          contact.number === number\n      )\n    ) {\n      Notify.info('цей контакт вже є у списку');\n      return;\n    }\n\n    if (contacts.find(contact => contact.number === number)) {\n      Notify.info('Телефон вже е у базі');\n      return;\n    }\n\n    const newContact = {\n      name,\n      number,\n    };\n\n    try {\n      await addContact(newContact);\n      Notify.success('Новий контакт був доданий');\n    } catch (error) {\n      console.log(error.message);\n      Notify.failure('Помилка, контакт не створенно');\n    }\n\n    formReset();\n  };\n\n  return (\n    <div className={css.container}>\n      <form className={css.contact__form} onSubmit={onContactFormSubmit}>\n        <label className={css.contact__label} htmlFor={nameInputId}>\n          Name\n          <input\n            className={css.contact__input}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            value={name}\n            onChange={onInputChange}\n            id={nameInputId}\n            required\n          />\n        </label>\n\n        <label className={css.contact__label} htmlFor={numberInputId}>\n          Phone\n          <input\n            className={css.contact__input}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            value={number}\n            onChange={onInputChange}\n            id={numberInputId}\n            required\n          />\n        </label>\n\n        <button\n          className={css.contact__btn}\n          type=\"submit\"\n          disabled={isCreating}\n        >\n          {isCreating ? 'Adding...' : 'Add Contact'}\n        </button>\n      </form>\n    </div>\n  );\n}","import SectionName from 'components/SectionName';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport ContactForm from 'components/ContactForm/ContactForm';\n\nexport default function Phonebook() {\n  return (\n    <>\n      <SectionName title=\"Add contact\" />\n      <ContactForm />\n      <SectionName title=\"Contacts\" />\n      <Filter />\n      <ContactList />\n    </>\n  );\n}"],"names":["SectionName","title","className","css","Filter","filterValue","useSelector","getFilterValue","dispatch","useDispatch","filterInputId","nanoid","htmlFor","type","onChange","evt","setFilter","currentTarget","value","trim","id","name","sortContactsByName","a","b","localeCompare","ContactItem","number","useDeleteContactMutation","deleteContact","isDeleting","isLoading","onContactDelete","contactId","contactName","Notify","console","log","message","href","onClick","disabled","size","ContactList","useGetAllContactsQuery","data","contacts","isError","refetch","totalContactsAmount","length","visibleContacts","useMemo","normalizedFilter","toLowerCase","filter","contact","includes","sort","getVisibleContacts","map","ContactForm","useState","setName","setNumber","useAddContactMutation","addContact","isCreating","nameInputId","numberInputId","onInputChange","target","onContactFormSubmit","preventDefault","find","newContact","onSubmit","pattern","required","Phonebook"],"sourceRoot":""}